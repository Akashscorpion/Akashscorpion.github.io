{"version":3,"sources":["pages/Head.jsx","components/RestaurantCard.js","pages/Hotels.jsx","App.js","serviceWorker.js","index.js"],"names":["Home","class","href","className","RestaurantCard","state","list","data","src","this","props","thumbnail_image","alt","name","id","cuisines","repeat","rating","reviews","React","Component","Hotels","useState","setState","defaultValue","onChange","e","target","value","sort","a","b","toLowerCase","compareName","sortMenu","disabled","hidden","map","x","App","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qPA8BeA,MA1Bf,WACI,OACI,8BACI,wBAAQC,MAAM,4BAAd,SACJ,qBAAKA,MAAM,YAAX,SACI,qBAAKA,MAAM,MAAX,SACI,qBAAKA,MAAM,SAAX,SACI,sBAAKA,MAAM,WAAX,UAEI,mBAAGC,KAAK,IAAID,MAAM,SAAlB,SACI,sBAAME,UAAU,QAAhB,sBAGJ,mBAAGF,MAAM,eAAT,SACI,wD,+CCQbG,E,kDAtBX,aAAc,IAAD,8BACT,gBACKC,MAAM,CACPC,KAAMC,GAHD,E,0CAOb,WACI,OACI,sBAAKJ,UAAU,OAAf,UAEQ,iCAAQ,qBAAKK,IAAKC,KAAKC,MAAMC,gBAAiBC,IAAKH,KAAKC,MAAMG,SAE9D,oBAAIC,GAAG,cAAP,SAAsBL,KAAKC,MAAMG,OACjC,4BAAIJ,KAAKC,MAAMK,WACf,yCAAY,SAAIC,OAAOP,KAAKC,MAAMO,WAClC,0CAAaR,KAAKC,MAAMQ,kB,GAjBfC,IAAMC,WCkEpBC,MAhEf,WAGI,MAAyBC,mBAAS,CAAChB,KAAMC,IAAzC,mBAAOD,EAAP,KAAaiB,EAAb,KA8BI,OAEA,8BAGI,sBAAKpB,UAAU,WAAf,UAEF,cAAC,EAAD,IACA,qBAAKW,GAAG,UAAR,SACM,oBAAGA,GAAI,OAAP,gCACI,yBAAQA,GAAG,eAAeU,aAAc,OAAQC,SAAU,SAACC,GAAD,OAvC3D,SAACA,GACW,WAAnBA,EAAEC,OAAOC,MACTL,EAAS,CACLjB,KAAMC,EAAKsB,MAAK,SAASC,EAAEC,GAAG,OAAOA,EAAEd,OAASa,EAAEb,YAI9B,WAAnBS,EAAEC,OAAOC,MACdL,EAAS,CACLjB,KAAMC,EAAKsB,MAAK,SAASC,EAAEC,GAAG,OAAOA,EAAEb,QAAUY,EAAEZ,aAI/B,SAAnBQ,EAAEC,OAAOC,OAQdL,EAAS,CACLjB,KAAMC,EAAKsB,MAAK,SAASC,EAAEC,GAAG,OARlC,SAAuBD,EAAGC,GAKtB,OAHAD,EAAIA,EAAEE,gBACND,EAAIA,EAAEC,gBAEY,EAAKF,EAAIC,EAAK,EAAI,EAGCE,CAAYH,EAAEjB,KAAMkB,EAAElB,WAiBUqB,CAASR,IAA1E,UACI,wBAAQE,MAAM,OAAOO,UAAQ,EAACC,QAAM,EAApC,kBACA,wBAAQnC,MAAM,cAAc2B,MAAM,OAAlC,kBACA,wBAAQ3B,MAAM,cAAc2B,MAAM,SAAlC,qBACA,wBAAQ3B,MAAM,cAAc2B,MAAM,SAAlC,6BAIXtB,EAAKA,KAAK+B,KACP,SAAAC,GAAC,OACG,cAAC,EAAD,CAAgB3B,gBAAiB2B,EAAE3B,gBAAiBE,KAAQyB,EAAEzB,KAAME,SAAYuB,EAAEvB,SAAUE,OAAUqB,EAAErB,OAAQC,QAAWoB,EAAEpB,mB,eCvClIqB,MAbf,WACE,OACE,cAAC,IAAD,UACE,qBAAKpC,UAAU,MAAf,SAEA,cAAC,IAAD,UACE,cAAC,IAAD,CAAOqC,OAAK,EAACC,KAAK,IAAIC,UAAWrB,WCArBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCLNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SDsH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.87cc6dde.chunk.js","sourcesContent":["import React from 'react'\r\nimport \"../styles/Head.css\"\r\n\r\n\r\nfunction Home() {\r\n    return (\r\n        <div>\r\n            <header class=\"header-area header-sticky\">\r\n        <div class=\"container\">\r\n            <div class=\"row\">\r\n                <div class=\"col-12\">\r\n                    <nav class=\"main-nav\">\r\n    \r\n                        <a href=\"#\" class=\"logo11\">\r\n                            <span className=\"logo1\">F-kart</span>\r\n                        </a>\r\n                     \r\n                        <a class='menu-trigger'>\r\n                            <span>Menu</span>\r\n                        </a>\r\n                   \r\n                    </nav>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    </header>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react'\nimport {Link} from 'react-router-dom'\nimport data from '../data/data.json'\nclass RestaurantCard extends React.Component{\n    constructor(){\n        super();\n        this.state={\n            list: data\n        };\n    }\n\n    render(){\n        return(\n            <div className=\"cart\">\n              \n                    <center><img src={this.props.thumbnail_image} alt={this.props.name}/></center>\n            \n                    <h3 id=\"hotel-title\">{this.props.name}</h3>\n                    <p>{this.props.cuisines}</p>\n                    <p>Rating: {'â˜…'.repeat(this.props.rating)}</p>\n                    <p>Reviews: {this.props.reviews}</p>\n            </div>\n        );\n    }\n}\n\nexport default RestaurantCard","import React,{useState} from 'react';\nimport Header from './Head'\nimport '../styles/HotelStyle.css'\nimport data from '../data/data.json'\nimport RestaurantCard from '../components/RestaurantCard'\nfunction Hotels() {\n  \n\n    const [list, setState] = useState({list: data})\n    const sortMenu=(e)=>{\n        if (e.target.value === 'rating'){\n            setState({\n                list: data.sort(function(a,b){return b.rating - a.rating})\n            })\n            \n        }\n        else if (e.target.value === 'review'){\n            setState({\n                list: data.sort(function(a,b){return b.reviews - a.reviews})\n            })\n            \n        }\n        else if (e.target.value === 'name'){\n            function compareName  (a, b)  {\n                // case-insensitive comparison\n                a = a.toLowerCase();\n                b = b.toLowerCase();\n              \n                return (a < b) ? -1 : (a > b) ? 1 : 0;\n              }\n            setState({\n                list: data.sort(function(a,b){return compareName(a.name, b.name)})\n            })\n            \n        }\n        \n    }\n\n        return(\n          \n        <div>\n            \n            \n            <div className=\"maincart\">\n\n          <Header/>\n          <div id=\"menubar\">\n                <p id =\"sort\">  Sort by &nbsp; &nbsp;\n                    <select id=\"sort-metrics\" defaultValue={\"none\"} onChange={(e) => sortMenu(e)}>\n                        <option value=\"none\" disabled hidden>None</option>\n                        <option class=\"sort-option\" value=\"name\">Name</option>\n                        <option class=\"sort-option\" value=\"rating\">Ratings</option>\n                        <option class=\"sort-option\" value=\"review\">Reviews</option>\n                    </select>\n                </p>\n            </div>\n            {list.list.map(\n                x => \n                    <RestaurantCard thumbnail_image={x.thumbnail_image} name = {x.name} cuisines = {x.cuisines} rating = {x.rating} reviews = {x.reviews}/>\n                    \n            )}\n\n        \n            \n            </div>\n        </div>\n        )\n    };\n\nexport default Hotels;","import React from 'react';\nimport Hotels from './pages/Hotels'\n\nimport {BrowserRouter as Router, Switch, Route} from 'react-router-dom';\n\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n      \n      <Switch>\n        <Route exact path=\"/\" component={Hotels}></Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';  \nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// import LoginPage from './pages/LoginPage'\n// import Hotels from './pages/Hotels'\n// import Orders from './pages/Orders'\n\n// ReactDOM.render(<LoginPage />, document.getElementById('root'));\n// ReactDOM.render(<Hotels />, document.getElementById('root'));\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}